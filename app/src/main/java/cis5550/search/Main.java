/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cis5550.search;

import static cis5550.search.Utils.parseQuery;
import static java.util.stream.StreamSupport.stream;

import cis5550.flame.FlameSubmit;
import cis5550.kvs.KVSClient;
import cis5550.kvs.Row;
import cis5550.webserver.Response.Status;
import cis5550.webserver.Server;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class Main {

  public static void main(String[] args) throws Exception {
    if (args.length < 1) {
      System.err.println("Search <port> <KVSMaster> <FlameMaster>");
      return;
    }

    int port = Integer.parseInt(args[0]);
    Server.port(port);

    KVSClient kvs = new KVSClient(args[1]);
    String flame = args[2];

    Server.staticFiles.location(System.getProperty("user.dir"));
    Server.get("/", (req, res) -> {
      res.status(Status.PERMANENT_REDIRECT);
      res.header("Location", "/index.html");
      return null;
    });

    Server.get("/search", (req, res) -> {
      String query = req.queryParams("q");
      if (query == null) {
        res.status(Status.PERMANENT_REDIRECT);
        res.header("Location", "/index.html");
        return null;
      }
      String startIndex = req.queryParams("startIndex");
      String endIndex = req.queryParams("endIndex");
      List<String> tokenizedQuery = parseQuery(query).sorted().toList();
      String queryKey = tokenizedQuery.toString();
      try {
        System.out.println(
          flame + " " + Job.class.getProtectionDomain().getCodeSource().getLocation().toURI()
            .getPath() + " " + Job.class.getName() + " " + Arrays.toString(new String[]{query}));
        FlameSubmit.submit(flame,
          Job.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath(),
          Job.class.getName(), new String[]{query});
      } catch (FileNotFoundException e) {
        e.printStackTrace();
      }
      return generatePage(stream(((Iterable<Row>) () -> {
        try {
          return kvs.scan(queryKey, startIndex, endIndex);
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      }).spliterator(), false).map(r -> r.get("url")).toList());
    });
  }

  public static String generatePage(List<String> urls) {
    return """
      <!doctype html>
      <html class="no-js" lang="">

      <head>
        <meta charset="utf-8">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <meta property="og:title" content="">
        <meta property="og:type" content="">
        <meta property="og:url" content="">
        <meta property="og:image" content="">

        <link rel="manifest" href="site.webmanifest">
        <link rel="apple-touch-icon" href="icon.png">
        <!-- Place favicon.ico in the root directory -->

        <link rel="stylesheet" href="css/normalize.css">
        <link rel="stylesheet" href="css/main.css">

        <meta name="theme-color" content="#fafafa">
      </head>

      <body>

        <!-- Add your site or application content here -->
        <p>%s</p>
        <script src="js/vendor/modernizr-3.11.2.min.js"></script>
        <script src="js/plugins.js"></script>
        <script src="js/main.js"></script>
      </body>

      </html>
      """.formatted(urls.toString());
  }
}
